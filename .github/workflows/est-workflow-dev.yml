name: Deploy EST Frontend and Backend to development

on:
  push:
    branches:
      - classifier-142

jobs:
  deploy:
    runs-on: [self-hosted, dev-dell]

    steps:
      # - name: Set PowerShell execution policy and clean up workspace
      #   run: |
      #     powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Scope Process -Force; del /Q /F /S 'C:\Users\pamod\Desktop\CICD\actions-runner\_work\classifier\classifier\*'"

      - name: Clean up workspace
        run: |
          Remove-Item -Path 'C:\Users\pamod\Desktop\CICD\actions-runner\_work\classifier\classifier\*' -Recurse -Force

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          clean: true

      # - name: Give execute permissions to testScript.sh
      #   run: |
      #     sudo chmod +x src/unitTesting.sh

      # - name: Remove all running containers, images, and prune Docker system
      #   run: |
      #     docker stop $(docker ps -a -q | grep -v -E "($(docker ps -q --filter "name=users_db")|$(docker ps -q --filter "name=tim")|$(docker ps -q --filter "name=authentication-layer")|$(docker ps -q --filter "name=tim-postgresql"))") || true
      #     docker rm $(docker ps -a -q | grep -v -E "($(docker ps -q --filter "name=users_db")|$(docker ps -q --filter "name=tim")|$(docker ps -q --filter "name=authentication-layer")|$(docker ps -q --filter "name=tim-postgresql"))") || true
      #     images_to_keep="authentication-layer|tim|data-mapper|resql|ruuter|cron-manager"
      #     docker images --format "{{.Repository}}:{{.Tag}}" | grep -Ev "$images_to_keep" | xargs -r docker rmi || true
      #     docker volume prune -f
      #     docker network prune -f

      - name: Stop all containers except the specified ones
        shell: powershell
        run: |
          $containers_to_keep = @(
              $(docker ps -q --filter "name=users_db"),
              $(docker ps -q --filter "name=tim"),
              $(docker ps -q --filter "name=authentication-layer"),
              $(docker ps -q --filter "name=tim-postgresql")
          ) -join "|"

          $containers_to_stop = docker ps -a -q | Where-Object {$_ -notmatch $containers_to_keep}
          if ($containers_to_stop) {
              docker stop $containers_to_stop
          }

      - name: Remove all containers except the specified ones
        shell: pwsh
        run: |
          $containers_to_keep = @(
              $(docker ps -q --filter "name=users_db"),
              $(docker ps -q --filter "name=tim"),
              $(docker ps -q --filter "name=authentication-layer"),
              $(docker ps -q --filter "name=tim-postgresql")
          ) -join "|"

          $containers_to_remove = docker ps -a -q | Where-Object {$_ -notmatch $containers_to_keep}
          if ($containers_to_remove) {
              docker rm $containers_to_remove
          }

      - name: Remove all images except the specified ones
        shell: pwsh
        run: |
          $images_to_keep = "authentication-layer|tim|data-mapper|resql|ruuter|cron-manager"
          $images_to_remove = docker images --format "{{.Repository}}:{{.Tag}}" | Where-Object {$_ -notmatch $images_to_keep}
          if ($images_to_remove) {
              $images_to_remove | ForEach-Object { docker rmi $_ }
          }

      - name: Prune unused volumes
        shell: pwsh
        run: docker volume prune -f

      - name: Prune unused networks
        shell: pwsh
        run: docker network prune -f

      - name: Update constants.ini with GitHub secret
        run: |
          powershell -Command "(Get-Content constants.ini) -replace 'DB_PASSWORD=value', 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' | Set-Content constants.ini"

      - name: Build and run Docker Compose
        run: |
          docker compose -f docker-compose.development.yml up --build -d

      # - name: Check for db_update label
      #   id: check_label
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const pr = await github.pulls.get({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.payload.number
      #       });
      #       const labels = pr.data.labels.map(label => label.name);
      #       return labels.includes('db_update');

      - name: Run migration script
        if: steps.check_label.outputs.result == 'true'
        run: |
          wsl sh migrate.sh

      # - name: Run unitTesting.sh
      #   id: unittesting
      #   run: |
      #     output=$(bash src/unitTesting.sh)
      #     if [ "$output" != "True" ]; then
      #       echo "unitTesting.sh failed with output: $output"
      #       exit 1
      #     fi

      - name: Send failure Slack notification
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{
             \"text\": \"The Development environment deployment failed during one of the steps. Please check the output for details.\"
          }" $SLACK_WEBHOOK_URL

      - name: Send success Slack notification
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"The build is complete and the development environment is now available. Please click the following link to access it: <https://esclassifier-dev.rootcode.software/classifier>\"
          }" $SLACK_WEBHOOK_URL
