declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'ACCEPT'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: headers
        type: object
        description: "Body field 'headers'"
      - field: payload
        type: json
        description: "Body field 'payload'"
      - field: issue_info
        type: string
        description: "Body field 'issue_info'"
      - field: event_type
        type: string
        description: "Body field 'event_type'"

get_webhook_data:
  assign:
    headers: ${incoming.headers}
    payload: ${incoming.body}
    issue_info: ${incoming.body.issue}
    event_type: ${incoming.body.webhookEvent}
  next: verify_jira_signature

verify_jira_signature:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/verify_signature"
    headers:
      type: json
    body:
      payload: ${payload}
      headers: ${headers}
      secret: "[#JIRA_WEBHOOK_SECRET]"
  result: valid_data
  next: assign_verification

assign_verification:
  assign:
    is_valid: true #${valid_data.response.body.valid}
  next: validate_url_signature

validate_url_signature:
  switch:
    - condition: ${is_valid === true}
      next: check_event_type
  next: return_error_found

check_event_type:
  switch:
    - condition: ${event_type === 'jira:issue_updated'}
      next: get_existing_labels
  next: get_jira_issue_info

get_existing_labels:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-jira-input-row-data"
    body:
      inputId: ${issue_info.key}
  result: res
  next: check_input_response

check_input_response:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_previous_labels
  next: return_db_request_fail

check_previous_labels:
  switch:
    - condition: ${res.response.body.length > 0}
      next: assign_previous_labels
  next: get_jira_issue_info

assign_previous_labels:
  assign:
    previous_corrected_labels: ${res.response.body[0].correctedLabels !==null ? JSON.parse(res.response.body[0].correctedLabels.value) :[]}
    previous_predicted_labels: ${res.response.body[0].predictedLabels !==null ? JSON.parse(res.response.body[0].predictedLabels.value) :[]}
  next: validate_issue_labels

validate_issue_labels:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_label_mismatch"
    headers:
      type: json
    body:
      newLabels: ${issue_info.fields.labels}
      correctedLabels: ${previous_corrected_labels}
      predictedLabels: ${previous_predicted_labels}
  result: label_response
  next: check_label_mismatch

check_label_mismatch:
  switch:
    - condition: ${label_response.response.body.isMismatch === 'true'}
      next: get_jira_issue_info
  next: return_data

get_jira_issue_info:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_jira_issue_info"
    headers:
      type: json
    body:
      data: ${issue_info}
  result: extract_info
  next: send_issue_data

send_issue_data:
  call: reflect.mock
  args:
    url: "[#CLASSIFIER_ANONYMIZER]/anonymize"
    headers:
      type: json
    body:
      platform: 'JIRA'
      key: ${issue_info.key}
      data: ${extract_info}
      parentFolderId: null
      labels: ${issue_info.fields.labels}
    response:
      statusCodeValue: 200
  result: res

check_response:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: return_ok
  next: return_bad_request

return_ok:
  status: 200
  return: "Jira data send successfully"
  next: end

return_data:
  status: 200
  return: "Not Sent"
  next: end

return_error_found:
  status: 400
  return: "Error Found"
  next: end

return_db_request_fail:
  status: 400
  return: "Fetch data for labels failed"
  next: end

return_bad_request:
  status: 400
  return: "Bad Request"
  next: end




