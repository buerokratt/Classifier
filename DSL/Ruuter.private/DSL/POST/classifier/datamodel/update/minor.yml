declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'MINOR'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: modelId
        type: number
        description: "Body field 'modelId'"
      - field: deploymentEnv
        type: string
        description: "Body field 'deploymentEnv'"
      - field: baseModels
        type: array
        description: "Body field 'baseModels'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_request_data:
  assign:
    model_id: ${incoming.body.modelId}
    deployment_env: ${incoming.body.deploymentEnv}
    base_models: ${incoming.body.baseModels}
  next: get_data_model

get_data_model:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-data-model-group-key-by-id"
    body:
      id: ${model_id}
  result: res
  next: check_data_model_status

check_data_model_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_data_exist
  next: return_not_found

check_data_exist:
  switch:
    - condition: ${res.response.body.length>0}
      next: assign_group_key
  next: return_not_found

assign_group_key:
  assign:
    group_key: ${res.response.body[0].modelGroupKey}
    major_version: ${res.response.body[0].majorVersion}
  next: snapshot_dataset_group

snapshot_dataset_group:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/snapshot-minor-data-model"
    body:
      id: ${model_id}
      group_key: ${group_key}
      major_version: ${major_version}
      deployment_env: ${deployment_env}
      base_models: ${base_models}
  result: res
  next: check_snapshot_status

check_snapshot_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_updated_data_exist
  next: assign_fail_response

check_updated_data_exist:
  switch:
    - condition: ${res.response.body.length>0}
      next: assign_new_model_id
  next: return_not_found

assign_new_model_id:
  assign:
    new_model_id: ${res.response.body[0].id}
  next: execute_cron_manager

execute_cron_manager:
  call: reflect.mock
  args:
    url: "[#CLASSIFIER_CRON_MANAGER]/execute/data_model/model_trainer"
    query:
      cookie: ${incoming.headers.cookie}
      model_id: ${model_id}
      new_model_id: ${new_model_id}
      updateType: 'minor'
  result: res
  next: assign_success_response

assign_success_response:
  assign:
    format_res: {
      model_id: '${model_id}',
      new_model_id: '${new_model_id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      model_id: '${model_id}',
      new_model_id: '',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_not_found:
  status: 400
  return: "Data Group Not Found"
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

