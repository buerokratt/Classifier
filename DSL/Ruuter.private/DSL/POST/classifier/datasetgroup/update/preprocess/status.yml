declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'STATUS'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: dgId
        type: number
        description: "Body field 'dgId'"
      - field: processedDataAvailable
        type: boolean
        description: "Body field 'processedDataAvailable'"
      - field: rawDataAvailable
        type: boolean
        description: "Body field 'rawDataAvailable'"
      - field: preprocessDataLocation
        type: string
        description: "Body field 'preprocessDataLocation'"
      - field: rawDataLocation
        type: string
        description: "Body field 'rawDataLocation'"
      - field: enableAllowed
        type: boolean
        description: "Body field 'enableAllowed'"
      - field: numSamples
        type: integer
        description: "Body field 'numSamples'"
      - field: numPages
        type: integer
        description: "Body field 'numPages'"

extract_request_data:
  assign:
    dg_id: ${incoming.body.dgId}
    processed_data_available: ${incoming.body.processedDataAvailable}
    raw_data_available: ${incoming.body.rawDataAvailable}
    preprocess_data_location: ${incoming.body.preprocessDataLocation}
    raw_data_location: ${incoming.body.rawDataLocation}
    enable_allowed: ${incoming.body.enableAllowed}
    num_samples: ${incoming.body.numSamples}
    num_pages: ${incoming.body.numPages}
  next: update_dataset_group_preprocess_status

update_dataset_group_preprocess_status:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-dataset-group-preprocess-status"
    body:
      id: ${dg_id}
      processed_data_available: ${processed_data_available}
      raw_data_available: ${raw_data_available}
      preprocess_data_location: ${preprocess_data_location}
      raw_data_location: ${raw_data_location}
      enable_allowed: ${enable_allowed}
      last_updated_timestamp: ${new Date().toISOString()}
      num_samples: ${num_samples}
      num_pages: ${num_pages}
  result: res
  next: check_preprocess_status

check_preprocess_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      operationSuccessful: true
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end