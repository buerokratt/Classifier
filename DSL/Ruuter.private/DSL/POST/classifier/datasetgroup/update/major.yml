declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'MAJOR'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: dgId
        type: number
        description: "Body field 'dgId'"
      - field: validationCriteria
        type: json
        description: "Body field 'validationCriteria'"
      - field: classHierarchy
        type: json
        description: "Body field 'classHierarchy'"

extract_request_data:
  assign:
    dg_id: ${incoming.body.dgId}
    validation_criteria: ${incoming.body.validationCriteria}
    class_hierarchy: ${incoming.body.classHierarchy}
    next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${validation_criteria !== null && class_hierarchy !=null}
      next: snapshot_dataset_group
  next: return_incorrect_request

snapshot_dataset_group:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/snapshot-dataset-group"
    body:
      id: ${dg_id}
  result: res
  next: check_snapshot_status

check_snapshot_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: get_dataset_group
  next: assign_fail_response

get_dataset_group:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-dataset-group-key-by-id"
    body:
      id: ${dg_id}
  result: res
  next: check_dataset_group_status

check_dataset_group_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_data_exist
  next: return_not_found

check_data_exist:
  switch:
    - condition: ${res.response.body.length>0}
      next: assign_group_key
  next: return_not_found

assign_group_key:
  assign:
    group_key: ${res.response.body[0].groupKey}
  next: update_old_dataset_group

update_old_dataset_group:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-major-version-dataset-group"
    body:
      id: ${dg_id}
      group_key: ${group_key}
      last_updated_timestamp: ${new Date().toISOString()}
      validation_criteria: ${JSON.stringify(validation_criteria)}
      class_hierarchy: ${JSON.stringify(class_hierarchy)}
  result: res
  next: check_old_dataset_status

check_old_dataset_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

