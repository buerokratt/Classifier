declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'CREATE'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: group_name
        type: string
        description: "Body field 'group_name'"
      - field: major_version
        type: integer
        description: "Body field 'major_version'"
      - field: minor_version
        type: integer
        description: "Body field 'minor_version'"
      - field: patch_version
        type: integer
        description: "Body field 'patch_version'"
      - field: latest
        type: boolean
        description: "Body field 'latest'"
      - field: is_enabled
        type: boolean
        description: "Body field 'is_enabled'"
      - field: enable_allowed
        type: boolean
        description: "Body field 'enable_allowed'"
      - field: last_model_trained
        type: string
        description: "Body field 'last_model_trained'"
      - field: creation_timestamp
        type: number
        description: "Body field 'creation_timestamp'"
      - field: last_updated_timestamp
        type: number
        description: "Body field 'last_updated_timestamp'"
      - field: last_used_for_training
        type: number
        description: "Body field 'last_used_for_training'"
      - field: validation_status
        type: string
        description: "Body field 'validation_status'"
      - field: validation_errors
        type: json
        description: "Body field 'validation_errors'"
      - field: processed_data_available
        type: boolean
        description: "Body field 'processed_data_available'"
      - field: raw_data_available
        type: boolean
        description: "Body field 'raw_data_available'"
      - field: num_samples
        type: integer
        description: "Body field 'num_samples'"
      - field: num_pages
        type: integer
        description: "Body field 'num_pages'"
      - field: raw_data_location
        type: string
        description: "Body field 'raw_data_location'"
      - field: preprocess_data_location
        type: string
        description: "Body field 'preprocess_data_location'"
      - field: validation_criteria
        type: json
        description: "Body field 'validation_criteria'"
      - field: class_hierarchy
        type: json
        description: "Body field 'class_hierarchy'"
      - field: connected_models
        type: array
        description: "Body field 'connected_models'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_request_data:
  assign:
    group_name: ${incoming.body.group_name}
    major_version: ${incoming.body.major_version}
    minor_version: ${incoming.body.minor_version}
    patch_version: ${incoming.body.patch_version}
    latest: ${incoming.body.latest === null ? false :incoming.body.latest}
    is_enabled: ${incoming.body.is_enabled === null ? false :incoming.body.is_enabled}
    enable_allowed: ${incoming.body.enable_allowed === null ? false :incoming.body.enable_allowed}
    last_model_trained: ${incoming.body.last_model_trained === null ? '' :incoming.body.last_model_trained }
    creation_timestamp: ${incoming.body.creation_timestamp}
    last_updated_timestamp: ${incoming.body.last_updated_timestamp}
    last_used_for_training: ${incoming.body.last_used_for_training}
    validation_status: ${incoming.body.validation_status}
    validation_errors: ${incoming.body.validation_errors}
    processed_data_available: ${incoming.body.processed_data_available === null ? false :incoming.body.processed_data_available }
    raw_data_available: ${incoming.body.raw_data_available === null ? false :incoming.body.raw_data_available}
    num_samples: ${incoming.body.num_samples}
    num_pages: ${incoming.body.num_pages}
    raw_data_location: ${incoming.body.raw_data_location}
    preprocess_data_location: ${incoming.body.preprocess_data_location}
    validation_criteria: ${incoming.body.validation_criteria}
    class_hierarchy: ${incoming.body.class_hierarchy}
    connected_models: ${incoming.body.connected_models}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${group_name !== null || validation_criteria !=null || class_hierarchy !==null }
      next: create_dataset_group_metadata
  next: return_incorrect_request

create_dataset_group_metadata:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/insert-dataset-group-metadata"
    body:
      group_name: ${group_name}
      major_version: ${major_version}
      minor_version: ${minor_version}
      patch_version: ${patch_version}
      latest: ${latest}
      is_enabled: ${is_enabled}
      enable_allowed: ${enable_allowed}
      last_model_trained: ${last_model_trained}
      creation_timestamp: ${creation_timestamp}
      last_updated_timestamp: ${last_updated_timestamp}
      last_used_for_training: ${last_used_for_training}
      validation_status: ${validation_status}
      validation_errors: ${JSON.stringify(validation_errors)}
      processed_data_available: ${processed_data_available}
      raw_data_available: ${raw_data_available}
      num_samples: ${num_samples}
      num_pages: ${num_pages}
      raw_data_location: ${raw_data_location}
      preprocess_data_location: ${preprocess_data_location}
      validation_criteria: ${JSON.stringify(validation_criteria)}
      class_hierarchy: ${JSON.stringify(class_hierarchy)}
      connected_models: ${JSON.stringify(connected_models)}
  result: res_dataset
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res_dataset.response.statusCodeValue && res_dataset.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      dg_id: '${res_dataset.response.body[0].id}',
      operation_successful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      dg_id: '',
      operation_successful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end
