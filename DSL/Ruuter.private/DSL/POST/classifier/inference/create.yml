declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'CREATE'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: inputId
        type: string
        description: "Body field 'inputId'"
      - field: inferenceText
        type: string
        description: "Body field 'inferenceText'"
      - field: predictedLabels
        type: json
        description: "Body field 'predictedLabels'"
      - field: averagePredictedClassesProbability
        type: int
        description: "Body field 'averagePredictedClassesProbability'"
      - field: platform
        type: string
        description: "Body field 'platform'"
      - field: allClassPredictedProbabilities
        type: json
        description: "Body field 'allClassPredictedProbabilities'"
      - field: primaryFolderId
        type: string
        description: "Body field 'primaryFolderId'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_request_data:
  assign:
    input_id: ${incoming.body.inputId}
    inference_text: ${incoming.body.inferenceText}
    predicted_labels: ${incoming.body.predictedLabels}
    average_predicted_classes_probability: ${incoming.body.averagePredictedClassesProbability}
    platform: ${incoming.body.platform}
    all_class_predicted_probabilities: ${incoming.body.allClassPredictedProbabilities}
    primary_folder_id: ${incoming.body.primaryFolderId}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${input_id !== null || inference_text !== null || predicted_labels !== null || average_predicted_classes_probability !== null || platform !== null || all_class_predicted_probabilities !== null}
      next: check_platform_data
  next: return_incorrect_request

check_platform_data:
  switch:
    - condition: ${platform == 'OUTLOOK'}
      next: check_primary_folder_exist
  next: get_epoch_date

check_primary_folder_exist:
  switch:
    - condition: ${primary_folder_id !== null}
      next: get_epoch_date
  next: return_primary_folder_not_found

get_epoch_date:
  assign:
    current_epoch: ${Date.now()}
  next: create_input_metadata

create_input_metadata:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/insert-input-metadata"
    body:
      input_id: ${input_id}
      inference_time_stamp: ${new Date(current_epoch).toISOString()}
      inference_text: ${inference_text}
      predicted_labels: ${JSON.stringify(predicted_labels)}
      average_predicted_classes_probability: ${average_predicted_classes_probability}
      platform: ${platform}
      all_class_predicted_probabilities: ${JSON.stringify(all_class_predicted_probabilities)}
      primary_folder_id: ${platform !== 'OUTLOOK' ? '' :primary_folder_id}
  result: res_input
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res_input.response.statusCodeValue && res_input.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      inferenceId: '${res_input.response.body[0].id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      inferenceId: '',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_primary_folder_not_found:
  status: 400
  return: 'Missing Primary Folder Id'
  next: end
