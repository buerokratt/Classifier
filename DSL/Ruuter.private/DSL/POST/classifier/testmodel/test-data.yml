declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'TEST-DATA'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: modelId
        type: number
        description: "Body field 'modelId'"
      - field: text
        type: string
        description: "Body field 'text'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_request_data:
  assign:
    model_id: ${incoming.body.modelId}
    text: ${incoming.headers.text}
    cookie: ${incoming.headers.cookie}
    next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${model_id !== null && text !== null}
      next: get_text_data
  next: return_incorrect_request

check_for_text_data:
  switch:
    - condition: ${text !== ''}
      next: get_data_model_by_id
  next: return_empty_request

send_data_to_predict:
  call: reflect.mock
  args:
    url: "[#CLASSIFIER_ANONYMIZER]/anonymize"
    body:
      id: ${model_id}
      text: ${text}
  result: res_model
  next: check_data_model_status

check_data_model_status:
  switch:
    - condition: ${200 <= res_model.response.statusCodeValue && res_model.response.statusCodeValue < 300}
      next: check_data_model_exist
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      modelId: '${model_id}',
      data: '${res_model.response.body}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      modelId: '${model_id}',
      data: '',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_empty_request:
  status: 400
  return: 'Text Data Empty'
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end