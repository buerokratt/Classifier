declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'ACEEPT'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: headers
        type: object
        description: "Body field 'headers'"
      - field: payload
        type: object
        description: "Body field 'payload'"
      - field: issue_info
        type: string
        description: "Body field 'issue_info'"

get_webhook_data:
  assign:
    headers: ${incoming.headers}
    payload: ${incoming.body}
    issue_info: ${incoming.body.issue}
  next: verify_jira_signature

verify_jira_signature:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/verify_signature"
    headers:
      type: json
    body:
      payload: ${payload}
      headers: ${headers}
      secret: "[#JIRA_WEBHOOK_SECRET]"
  result: valid_data
  next: assign_verification

assign_verification:
  assign:
    is_valid: ${valid_data.response.body.valid}
  next: validate_url_signature

validate_url_signature:
  switch:
    - condition: ${is_valid === "true"}
      next: get_jira_issue_info
  next: return_error_found

get_jira_issue_info:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_jira_issue_info"
    headers:
      type: json
    body:
      data: ${issue_info}
  result: extract_info
  next: send_issue_data

send_issue_data:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_jira_issue_info"# need correct url
    headers:
      type: json
    body:
      info: ${extract_info}
  result: res

check_response:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: return_ok
  next: return_bad_request

return_ok:
  status: 200
  return: "Jira data send successfully"
  next: end

return_bad_request:
  status: 400
  return: "Bad Request"
  next: end




